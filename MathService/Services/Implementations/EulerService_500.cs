using System;
using System.Collections.Generic;
using System.Numerics;
using System.Text;
using System.Linq;
using MathService.Services.Contracts;
using MathService.Models.EulerModels;
using MathService.Models;
using System.Diagnostics;
using System.IO;
using System.Text.RegularExpressions;

namespace MathService.Services.Implementations
{
    public partial class EulerService : IEulerService
    {
        //https://projecteuler.net/problem=500
        //Problem 500!!!
        //Problem 500 Published on Saturday, 31st January 2015, 01:00 pm; Solved by 2549; Difficulty rating: 15%
        //        
        //The number of divisors of 120 is 16.
        //In fact 120 is the smallest number having 16 divisors.

        //Find the smallest number with 2^500500 divisors.
        //Give your answer modulo 500500507.

        //-------- 120
        //1 2 3 4 5 6 8 10 12 15 20 24 30 36 60 120

        //120 = 2^3 * 3^1 * 5^1
        //(3+1)(1+1)(1+1) = 16

        // all even numbers with exactly 16 factors
        //2^15                  = 32768
        //2^7 * 3^1             = 348
        //2^3 * 3^3             = 216
        //2^3 * 3^1 * 5^1       = 120
        //2^1 * 3^1 * 5^1 * 7^1 = 210
        //---------------------------------------------

        //------------ 32 factors       
        //2147483648 	= 2^31						
        //98304 		= 2^15 * 3^1
        //1152			= 2^7 * 3^3
        //640			= 2^7 * 3^1 * 5^1
        //1080			= 2^3 * 3^3 * 5^1
        //840			= 2^3 * 3^1 * 5^1 * 7^1
        //2310			= 2^1 * 3^1 * 5^1 * 7^1 * 11^1


        private static List<int> _primes { get; set; }

        public object RunProblem500(int maxFactors)
        {
            //var level_500500 = ReadTextFile();
            _primes = new List<int>(_calc.GetFirstNPrimes(600000));

            var level = new List<int> { 2, 1, 1 };
            
            for(var i = 5; i <= maxFactors; i++)
            {
                level = GetNextLevel(level);
                //Print(result);

                
            }



            //return new { result = level_500500, sum = level_500500.Sum() };

            return BigInteger.Remainder(GetNumberFromExpansion(level, _mod), _mod).ToString();
        }

        private int GetLevelFactorCount(List<int> level)
        {
            var factorCount = 0;
            for (var i = 0; i < level.Count; i++)
                factorCount += _levelPowers[level[i]];
            return factorCount;
        }

        private BigInteger FindNumberOfDivisors(BigInteger num)
        {
            var n = BigInteger.Zero;


            return n;
        }

        private BigInteger GetNumberFromPrimeFactorization(List<int> powers)
        {
            var num = BigInteger.One;

            for (var i = 0; i < powers.Count; i++)
                for (var p = 0; p < powers[i]; p++)
                    num *= _primes[i];


            return num;
        }

        private BigInteger GetNumberFromExpansion(List<int> levels)
        {
            var num = BigInteger.One;
            
            for (var i = 0; i < levels.Count; i++)
            {
                num *= BigInteger.Pow(_primes[i], _levelPowers[levels[i]]);//.ModPow(primes[i], _levelPowers[levels[i]], _mod);
            }
            return num;
        }

        private BigInteger GetNumberFromExpansion(List<int> levels, BigInteger mod)
        {
            var num = BigInteger.One;
            
            for (var i = 0; i < levels.Count; i++)
            {
                num *= BigInteger.ModPow(_primes[i], _levelPowers[levels[i]], mod);
            }
            return num;
        }

        private List<int> GetNextLevel(List<int> currLevel)
        {
            // level increase is prime^(2^current level value)
            var nextLevel = new List<int>(currLevel);
            var leastIncr = toTwoPower((long)_primes[0], currLevel[0]);
            var incrPos = 0;

            for (var i = 1; i < currLevel.Count; i++)
            {
                // on same level so can't beat previous result
                if (currLevel[i] == currLevel[i - 1])
                    continue;
                
                //var incr = BigInteger.Pow((long)_calc.GetPrime(i), _twoPowers[currLevel[i]]);
                var incr = toTwoPower((long)_primes[i], currLevel[i]);
                
                if (incr < leastIncr)
                {
                    leastIncr = incr;
                    incrPos = i;
                }

                // break out after first level 1
                if (currLevel[i] == 1)
                    break;
            }

            // check vs next new prime
            var nextPrime = _primes[currLevel.Count];
            if (nextPrime < leastIncr)
                nextLevel.Add(1);
            else
                nextLevel[incrPos]++;


            return nextLevel;
        }

        private void expProgression()
        {
            var str = "new List<ulong>(){ \"1\", \"2\" ";
            var num = new BigInteger(2);
            
            for(var i = 0; i < 15; i++)
            {
                num *= num;
                str += $",\n \"{num}\"";
            }
            
            str += " };";
            Debug.WriteLine(str);
        }

        private static BigInteger _mod = BigInteger.Parse("500500507");
        private static List<int> _levelPowers = new List<int> { 0, 1, 3, 7, 15, 31, 63, 127, 255, 511, 1023 };
        private static List<ulong> _twoPowers = new List<ulong>(){ 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608, 16777216, 33554432, 67108864,
            134217728, 268435456, 536870912, 1073741824, 2147483648, 4294967296, 8589934592, 17179869184, 34359738368, 68719476736, 137438953472, 274877906944, 549755813888, 1099511627776, 2199023255552, 4398046511104, 8796093022208, 17592186044416, 35184372088832,
            70368744177664, 140737488355328, 281474976710656, 562949953421312, 1125899906842624, 2251799813685248, 4503599627370496, 9007199254740992, 18014398509481984, 36028797018963968, 72057594037927936, 144115188075855872, 288230376151711744, 576460752303423488,
            1152921504606846976, 2305843009213693952, 4611686018427387904, 9223372036854775808 };
        private static List<string> _twoLevels = new List<string>()
        {
            "2","4","16","256","65536","4294967296","18446744073709551616","340282366920938463463374607431768211456","115792089237316195423570985008687907853269984665640564039457584007913129639936",
            "13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084096",
            "179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137216",
            "32317006071311007300714876688669951960444102669715484032130345427524655138867890893197201411522913463688717960921898019494119559150490921095088152386448283120630877367300996091750197750389652106796057638384067568276792218642619756161838094338476170470581645852036305042887575891541065808607552399123930385521914333389668342420684974786564569494856176035326322058077805659331026192708460314150258592864177116725943603718461857357598351152301645904403697613233287231227125684710820209725157101726931323469678542580656697935045997268352998638215525166389437335543602135433229604645318478604952148193555853611059596230656",
            "1044388881413152506691752710716624382579964249047383780384233483283953907971557456848826811934997558340890106714439262837987573438185793607263236087851365277945956976543709998340361590134383718314428070011855946226376318839397712745672334684344586617496807908705803704071284048740118609114467977783598029006686938976881787785946905630190260940599579453432823469303026696443059025015972399867714215541693835559885291486318237914434496734087811872639496475100189041349008417061675093668333850551032972088269550769983616369411933015213796825837188091833656751221318492846368125550225998300412344784862595674492194617023806505913245610825731835380087608622102834270197698202313169017678006675195485079921636419370285375124784014907159135459982790513399611551794271106831134090584272884279791554849782954323534517065223269061394905987693002122963395687782878948440616007412945674919823050571642377154816321380631045902916136926708342856440730447899971901781465763473223850267253059899795996090799469201774624817718449867455659250178329070473119433165550807568221846571746373296884912819520317457002440926616910874148385078411929804522981857338977648103126085903001302413467189726673216491511131602920781738033436090243804708340403154190336",
            "1090748135619415929462984244733782862448264161996232692431832786189721331849119295216264234525201987223957291796157025273109870820177184063610979765077554799078906298842192989538609825228048205159696851613591638196771886542609324560121290553901886301017900252535799917200010079600026535836800905297805880952350501630195475653911005312364560014847426035293551245843928918752768696279344088055617515694349945406677825140814900616105920256438504578013326493565836047242407382442812245131517757519164899226365743722432277368075027627883045206501792761700945699168497257879683851737049996900961120515655050115561271491492515342105748966629547032786321505730828430221664970324396138635251626409516168005427623435996308921691446181187406395310665404885739434832877428167407495370993511868756359970390117021823616749458620969857006263612082706715408157066575137281027022310927564910276759160520878304632411049364568754920967322982459184763427383790272448438018526977764941072715611580434690827459339991961414242741410599117426060556483763756314527611362658628383368621157993638020878537675545336789915694234433955666315070087213535470255670312004130725495834508357439653828936077080978550578912967907352780054935621561090795845172954115972927479877527738560008204118558930004777748727761853813510493840581861598652211605960308356405941821189714037868726219481498727603653616298856174822413033485438785324024751419417183012281078209729303537372804574372095228703622776363945290869806258422355148507571039619387449629866808188769662815778153079393179093143648340761738581819563002994422790754955061288818308430079648693232179158765918035565216157115402992120276155607873107937477466841528362987708699450152031231862594203085693838944657061346236704234026821102958954951197087076546186622796294536451620756509351018906023773821539532776208676978589731966330308893304665169436185078350641568336944530051437491311298834367265238595404904273455928723949525227184617404367854754610474377019768025576605881038077270707717942221977090385438585844095492116099852538903974655703943973086090930596963360767529964938414598185705963754561497355827813623833288906309004288017321424808663962671333528009232758350873059614118723781422101460198615747386855096896089189180441339558524822867541113212638793675567650340362970031930023397828465318547238244232028015189689660418822976000815437610652254270163595650875433851147123214227266605403581781469090806576468950587661997186505665475715792896",


        };

        private static BigInteger toTwoPower(long x, int y)
        {
            long result = x;
            ulong i = 2;
            while (i <= _twoPowers[y])
            {
                result *= x;
                i++;
            }
            return result;
        }

        private static BigInteger toTwoDoublePower(long x)
        {
            var result = BigInteger.One;



            return result;
        }

        private void Print(List<int> list)
        {
            var str = $"{{{list[0]}";

            for (var i = 1; i < list.Count; i++)
            {
                str += $", {list[i]}";
            }

            str += $"}}";
            Debug.WriteLine(str);
        }

        private List<int> ReadTextFile()
        {
            var intList = new List<int>(
            File.ReadLines("../MathService/Repositories/Constants/euler_500_answer.txt")
                //.AsParallel() //maybe?
                .SelectMany(line => Regex.Matches(line, @"\d+").Cast<Match>())                
                .Select(i => int.Parse(i.Value)));
            ;
            return intList;
        }
    }
}
